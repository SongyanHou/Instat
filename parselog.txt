    lex.py: 909:lex: tokens   = ['NUMBER', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'PRINT', 'SHOW']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z_0-9]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_NUMBER -> '\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_ID>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_NUMBER>\d+)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PRINT,'print',3,35)
   yacc.py: 366:Action : Shift and goto state 4
   yacc.py: 337:
   yacc.py: 338:State  : 4
   yacc.py: 352:Stack  : PRINT . LexToken(STRING,'"hello world"',3,41)
   yacc.py: 366:Action : Shift and goto state 9
   yacc.py: 337:
   yacc.py: 338:State  : 9
   yacc.py: 352:Stack  : PRINT STRING . LexToken(SEMICOLON,';',3,54)
   yacc.py: 389:Action : Reduce rule [string -> STRING] with ['"hello world"'] and goto state 5
   yacc.py: 423:Result : <str @ 0x1102fbce0> ('"hello world"')
   yacc.py: 337:
   yacc.py: 338:State  : 8
   yacc.py: 352:Stack  : PRINT string . LexToken(SEMICOLON,';',3,54)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : PRINT string SEMICOLON . LexToken(SHOW,'show',4,56)
   yacc.py: 389:Action : Reduce rule [end -> SEMICOLON] with [';'] and goto state 7
   yacc.py: 423:Result : <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : PRINT string end . LexToken(SHOW,'show',4,56)
   yacc.py: 389:Action : Reduce rule [statement -> PRINT string end] with ['print','"hello world"',None] and goto state 3
   yacc.py: 423:Result : <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : statement . LexToken(SHOW,'show',4,56)
   yacc.py: 389:Action : Reduce rule [program -> statement] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : program . LexToken(SHOW,'show',4,56)
   yacc.py: 366:Action : Shift and goto state 1
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : program SHOW . LexToken(HASHTAG,'#helloworld',4,61)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : program SHOW HASHTAG . LexToken(SEMICOLON,';',4,72)
   yacc.py: 389:Action : Reduce rule [hashtag -> HASHTAG] with ['#helloworld'] and goto state 6
   yacc.py: 423:Result : <str @ 0x1102f6540> ('#helloworld')
   yacc.py: 337:
   yacc.py: 338:State  : 5
   yacc.py: 352:Stack  : program SHOW hashtag . LexToken(SEMICOLON,';',4,72)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : program SHOW hashtag SEMICOLON . $end
   yacc.py: 389:Action : Reduce rule [end -> SEMICOLON] with [';'] and goto state 7
   yacc.py: 423:Result : <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 10
   yacc.py: 352:Stack  : program SHOW hashtag end . $end
   yacc.py: 389:Action : Reduce rule [statement -> SHOW hashtag end] with ['show','#helloworld',None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 7
   yacc.py: 352:Stack  : program statement . $end
   yacc.py: 389:Action : Reduce rule [program -> program statement] with [None,None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : program . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x10fcb27a8> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
