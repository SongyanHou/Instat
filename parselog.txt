    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
    lex.py: 909:lex: tokens   = ['NONE', 'INTEGER', 'FLOAT', 'BOOLEAN', 'STRING', 'HASHTAG', 'ID', 'SEMICOLON', 'NEWLINE', 'SEARCH', 'FALSE', 'STRINGF', 'SHOW', 'NONE', 'PRINT', 'TRUE']
    lex.py: 910:lex: literals = ''
    lex.py: 911:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 938:lex: Adding rule t_FLOAT -> '[-+]?\d+\.\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_INTEGER -> '[-+]?\d+' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_COMMENT -> '(/\*(.|\n)*?\*/)|(//.*)' (state 'INITIAL')
    lex.py: 938:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_HASHTAG -> '\#[a-zA-Z0-9_][a-zA-Z0-9_]*' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_STRING -> '\"([^"]|\n)*\"' (state 'INITIAL')
    lex.py: 944:lex: Adding rule t_SEMICOLON -> ';' (state 'INITIAL')
    lex.py: 951:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 960:lex: state 'INITIAL' : regex[0] = '(?P<t_FLOAT>[-+]?\d+\.\d+)|(?P<t_INTEGER>[-+]?\d+)|(?P<t_ID>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_COMMENT>(/\*(.|\n)*?\*/)|(//.*))|(?P<t_newline>\n+)|(?P<t_HASHTAG>\#[a-zA-Z0-9_][a-zA-Z0-9_]*)|(?P<t_STRING>\"([^"]|\n)*\")|(?P<t_SEMICOLON>;)'
